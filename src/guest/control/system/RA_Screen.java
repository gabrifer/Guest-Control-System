/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guest.control.system;

import java.io.*;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.*;

/**
 * RA_Screen allows an RA to check-in new or old guests, check-out guests, generate
 * a log for future review, and logoff.
 * 
 * @author Austen
 */
public class RA_Screen extends javax.swing.JFrame {

    private String url;
    Connection con;
    PreparedStatement pst = null;
    ResultSet rs = null;

    String hostName;
    String hostRoomNum;
    String hostID;
    String guestID;
    String guestName;
    String guestPhoneNum;
    String timeIn;
    String timeOut;
    String totalGuests;
    public static int currRow;
    String nextLine = "------------------------------------------------------"
            + "------------------------------------------------------"
            + "------------------------------------------------------"
            + "---------------------------------";

    /**
     * Creates new form RA_Screen
     */
    public RA_Screen() {
        initComponents();
        int i = 0;
        int j = 0;
        currRow = 0;
        for (CheckIn ckLst : GuestControlSystem.ckLst) {

            if (ckLst.getDormIdx() == GuestControlSystem.loggedDormIndex) {
                table.setValueAt(ckLst.getCheckInTime(), i, 0);
                for (CheckOut coLst : GuestControlSystem.coLst) {
                    if (coLst.getCheckInIdx() == j) {
                        table.setValueAt(coLst.getCheckOutTime(), i, 1);
                    }
                }
                table.setValueAt(ckLst.getG().getGuestName(), i, 2);
                table.setValueAt(ckLst.getG().getGuestPhoneNum(), i, 3);
                table.setValueAt(ckLst.getG().getGuestEmail(), i, 4);
                table.setValueAt(ckLst.getG().getGuestID(), i, 5);
                table.setValueAt(ckLst.getHostName(), i, 6);
                table.setValueAt(ckLst.getHostId(), i, 7);
                table.setValueAt(ckLst.getHostRoom(), i, 8);
                i++;
                currRow = i;
            }
            j++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        CheckInNewGuest = new javax.swing.JButton();
        Logoff = new javax.swing.JButton();
        GenerateLog = new javax.swing.JButton();
        CheckOutGuest = new javax.swing.JButton();
        dormIndicator = new javax.swing.JLabel();
        CheckInOldGuest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RA screen");
        setResizable(false);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Time in", "Time out", "Guest name", "Guest phone", "Guest Email", "Guest ID", "Host name", "Host ID", "Host room #"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        CheckInNewGuest.setText("Check-in New Guest");
        CheckInNewGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckInNewGuestActionPerformed(evt);
            }
        });

        Logoff.setText("Logoff");
        Logoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoffActionPerformed(evt);
            }
        });

        GenerateLog.setText("Generate Log");
        GenerateLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateLogActionPerformed(evt);
            }
        });

        CheckOutGuest.setText("Check-out Guest");
        CheckOutGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckOutGuestActionPerformed(evt);
            }
        });

        dormIndicator.setText(GuestControlSystem.dormsLst.get(GuestControlSystem.loggedDormIndex).getName() + " System");

        CheckInOldGuest.setText("Check-in Old Guest");
        CheckInOldGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckInOldGuestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Logoff)
                        .addGap(78, 78, 78)
                        .addComponent(dormIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckInNewGuest)
                            .addComponent(CheckInOldGuest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CheckOutGuest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GenerateLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckInNewGuest)
                    .addComponent(GenerateLog))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Logoff)
                    .addComponent(dormIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CheckOutGuest)
                        .addComponent(CheckInOldGuest)))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(815, 579));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

/**
 * Logoff from the system. Returns to Login page
 * @param evt 
 */
    private void LogoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoffActionPerformed
        // TODO add your handling code here:
        dispose();
        LoginScreen screen = new LoginScreen();
        screen.setVisible(true);
    }//GEN-LAST:event_LogoffActionPerformed

    /**
     * Pad with String with spaces to make lengths even. Used for column-alignment.
     * @param s
     * @param n
     * @return 
     */
    public static String padRight(String s, int n) {
        if (n > 0) {
            for (int i = 0; i < n; i++) {
                if (i == n - 1) {
                    s += "|";
                } else {
                    s += " ";
                }
            }
        } else {
            for (int i = 0; i > n; i--) {
                if (i == n + 1) {
                    s += "|";
                } else {
                    s += " ";
                }
            }
        }
        return s;
    }

    /**
     * Simpler way of aligning the columns instead of padRight.
     * @param s
     * @param n
     * @return 
     */
    public static String padLeft(String s, int n) {
        return String.format("%1$" + n + "s", s);
    }

    /**
     * Update the table corresponding to particular RA login credentials
     * Ex: millnorth100 has 20 entries in the table upon logging back in
     * 
     * With different login credentials:
     *     millsouth100 has only 5 entries in the table upon logging back in
     */
    public static void update() {
        int index = GuestControlSystem.ckLst.size() - 1;
        int i = currRow;
        table.setValueAt(GuestControlSystem.ckLst.get(index).getCheckInTime(), i, 0);
        table.setValueAt(GuestControlSystem.ckLst.get(index).getG().getGuestName(), i, 2);
        table.setValueAt(GuestControlSystem.ckLst.get(index).getG().getGuestPhoneNum(), i, 3);
        table.setValueAt(GuestControlSystem.ckLst.get(index).getG().getGuestEmail(), i, 4);
        table.setValueAt(GuestControlSystem.ckLst.get(index).getG().getGuestID(), i, 5);
        table.setValueAt(GuestControlSystem.ckLst.get(index).getHostName(), i, 6);
        table.setValueAt(GuestControlSystem.ckLst.get(index).getHostId(), i, 7);
        table.setValueAt(GuestControlSystem.ckLst.get(index).getHostRoom(), i, 8);
        currRow++;
    }

    /**
     * Generate a log as a .txt file, so that the RA can review the information
     * at a later time. Overwrites txt file if button is clicked again
     * @param evt 
     */
    private void GenerateLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateLogActionPerformed
        // TODO add your handling code here:
        try {
            PrintWriter outputFile = new PrintWriter("GeneratedLog.txt");

            // Used to format column lengths in .txt file
            String[] format = new String[9];
            format[0] = "%-17s";
            format[1] = "%-21s";
            format[2] = "%-23s";
            format[3] = "%-24s";
            format[4] = "%-24s";
            format[5] = "%-21s";
            format[6] = "%-22s";
            format[7] = "%-20s";
            format[8] = "%-15s";

            // Print the Column names
            for (int i = 0; i < table.getColumnCount(); i++) {
                if(i < table.getColumnCount() - 1){
                    outputFile.print(table.getColumnName(i) + "          |   ");
                }
                else{
                    outputFile.print(table.getColumnName(i) + "| ");
                }
                
            }
            outputFile.print(nextLine);         // Prints "-" line under column names

            // Print the Values from the table on the RA screen
            for (int i = 0; i < table.getRowCount(); i++) {
                outputFile.print('\n');
                for (int j = 0; j < table.getColumnCount(); j++) {
                    String value = (String) table.getValueAt(i, j);
                    //String columnName = jTable1.getColumnName(j);
                    outputFile.print(String.format(format[j], value));
                    outputFile.print("|");
                }

            }

            outputFile.close();
        } catch (FileNotFoundException e) {

        }
        JOptionPane.showMessageDialog(null, "Log successfully generated!");
    }//GEN-LAST:event_GenerateLogActionPerformed

    /**
     * To check-in a new guest. Once a new guest has been checked-in, their name, email, and phone number
     * are stored in the local database in a table specifically used for guests.
     * @param evt 
     */
    private void CheckInNewGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckInNewGuestActionPerformed
        // TODO add your handling code here:
        CheckInNew mainScreen = new CheckInNew();
        mainScreen.setVisible(true);
    }//GEN-LAST:event_CheckInNewGuestActionPerformed

    /**
     * Checks out either a new or old guest from the system. Corresponding check-out time
     * is added to the row corresponding to a specific guest.
     * @param evt 
     */
    private void CheckOutGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckOutGuestActionPerformed
        // TODO add your handling code here:
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm");        // MM/DD/YYYY HH:mm format
        String time = sdf.format(cal.getTime());                                // Get time from computer
        int row;

        // Try to update the table
        try {
            row = table.getSelectedRow();
            CheckOut co = new CheckOut();
            co.setCheckOutTime(time);
            String value = table.getValueAt(row, 6).toString();
            // Get guest info based on their index in the database guest table
            ResultSet result = GuestControlSystem.dB.getCheckInIdx(value).executeQuery();
            if (result.next()) {
                co.setCheckInIdx(Integer.parseInt(result.getString("idx")));
            }
            GuestControlSystem.coLst.add(co);

            int index = GuestControlSystem.coLst.size()-1; 
            GuestControlSystem.dB.addCheckOut(index, time, co.getCheckInIdx());
            
            // Get their email address so that they can be notified of check-out
            String email = table.getValueAt(row, 4).toString();
            String dormName = GuestControlSystem.dormsLst.get(GuestControlSystem.loggedDormIndex).getName();
            GuestControlSystem.sender.sendMessageCheckOutConfirmation(email, time, dormName);
            
            table.setValueAt(time, row, 1);
            JOptionPane.showMessageDialog(null, "Guest successfully checked-out!");
        } 
        
        // If no row selected, notify user
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please, select a row");
        }

    }//GEN-LAST:event_CheckOutGuestActionPerformed

    /**
     * To check-in an old guest. Pulls from the guest table in the local database to fill
     * email and phone number fields in the RA_Screen table based on the index corresponding to guest name
     * in the database guest table.
     * @param evt 
     */
    private void CheckInOldGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckInOldGuestActionPerformed
        // TODO add your handling code here:
        CheckInOld screen = new CheckInOld();
        screen.setVisible(true);

    }//GEN-LAST:event_CheckInOldGuestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RA_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RA_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RA_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RA_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RA_Screen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckInNewGuest;
    private javax.swing.JButton CheckInOldGuest;
    private javax.swing.JButton CheckOutGuest;
    private javax.swing.JButton GenerateLog;
    private javax.swing.JButton Logoff;
    private javax.swing.JLabel dormIndicator;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
